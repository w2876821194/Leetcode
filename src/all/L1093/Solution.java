package all.L1093;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

class Solution {
    public double[] sampleStats(int[] count) {
        // min,max,avg,中位数,众数
        Map<Integer, Integer> map = new HashMap<>();
        List<Integer> list = new ArrayList<>();
        double min = 1 << 31 - 1, max = -1, Num = 0, mode = 0, modeNum = 0;
        long sum = 0;
        for (int i = 0; i < count.length; i++) {
            int num = count[i];
            if (num != 0) {
                Num += num;
                min = Math.min(min, i);
                max = Math.max(max, i);
                sum += (long) num * i;
                if (num > modeNum) {
                    modeNum = num;
                    mode = i;
                }
                list.add(i);
                map.put(i, num);
            }
        }
        // 计数
        int bNum = 0;
        // 中位数索引
        int vNmu = (int) (Num % 2 == 0 ? (Num - 1) / 2 : Num / 2);
        // 中位数值
        double p = 0;
        // 第二个数标记
        boolean flag = false;
//        for (Integer integer : map.keySet()) {
//            if (flag) {
//                p += integer;
//                p = p / 2;
//                break;
//            }
//
//
//            if (bNum + map.get(integer) >= vNmu) {
//                if (Num % 2 != 0) {
//                    p = integer;
//                    break;
//                }
//
//                if (Num % 2 == 0) {
//                    p = integer;
//                    if (vNmu + 2 > bNum + map.get(integer)) {
//                        flag = true;
//                        continue;
//                    } else {
//                        p += integer;
//                        p = p / 2;
//                        break;
//                    }
//                }
//            } else {
//                bNum += map.get(integer);
//            }
//        }
        for (Integer integer : list) {
            if (flag) {
                p += integer;
                p = p / 2;
                break;
            }

            if (bNum + map.get(integer) >= vNmu + 1) {
                if (Num % 2 != 0) {
                    p = integer;
                    break;
                }

                if (Num % 2 == 0) {
                    p = integer;
                    if (vNmu + 2 > bNum + map.get(integer)) {
                        flag = true;
                        continue;
                    } else {
                        p += integer;
                        p = p / 2;
                        break;
                    }
                }
            } else {
                bNum += map.get(integer);
            }
        }

        return new double[]{min, max, sum / Num, p, mode};
    }
}

class Test {
    public static void main(String[] args) {
        int[] count = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        new Solution().sampleStats(count);
    }
}

//[2725123,2529890,2612115,3807943,3002363,3107290,2767526,981092,896521,2576757,2808163,3315813,2004022,2516900,607052,1203189,2907162,1849193,1486120,743035,3621726,3366475,639843,3836904,462733,2614577,1881392,85099,709390,3534613,360309,404975,715871,2258745,1682843,3725079,564127,1893839,2793387,2236577,522108,1183512,859756,3431566,907265,1272267,2261055,2234764,1901434,3023329,863353,2140290,2221702,623198,955635,304443,282157,3133971,1985993,1113476,2092502,2896781,1245030,2681380,2286852,3423914,3549428,2720176,2832468,3608887,174642,1437770,1545228,650920,2357584,3037465,3674038,2450617,578392,622803,3206006,3685232,2687252,1001246,3865843,2755767,184888,2543886,2567950,1755006,249516,3241670,1422728,809805,955992,415481,26094,2757283,995334,3713918,2772540,2719728,1204666,1590541,2962447,779517,1322374,1675147,3146304,2412486,902468,259007,3161334,1735554,2623893,1863961,520352,167827,3654335,3492218,1449347,1460253,983079,1135,208617,969433,2669769,284741,1002734,3694338,2567646,3042965,3186843,906766,2755956,2075889,1241484,3790012,2037406,2776032,1123633,2537866,3028339,3375304,1621954,2299012,1518828,1380554,2083623,3521053,1291275,180303,1344232,2122185,2519290,832389,1711223,2828198,2747583,789884,2116590,2294299,1038729,1996529,600580,184130,3044375,261274,3041086,3473202,2318793,2967147,2506188,127448,290011,3868450,1659949,3662189,1720152,25266,1126602,1015878,2635566,619797,2898869,3470795,2226675,2348104,2914940,1907109,604482,2574752,1841777,880254,616721,3786049,2278898,3797514,1328854,1881493,1802018,3034791,3615171,400080,2277949,221689,1021253,544372,3101480,1155691,3730276,1827138,3621214,2348383,2305429,313820,36481,2581470,2794393,902504,2589859,740480,2387513,2716342,1914543,3219912,1865333,2388350,3525289,3758988,961406,1539328,448809,1326527,1339048,2924378,2715811,376047,3642811,2973602,389167,1026011,3633833,2848596,3353421,1426817,219995,1503946,2311246,2618861,1497325,3758762,2115273,3238053,2419849,2545790]
// [0.00000,255.00000,128.64187,131.00000,175.00000]
// [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,306,821,1449,1946,2519,3145,3669,4205,4567,5267,5827,6364,7114,7468,8192,8632,9236,9734,10294,10882,11421,11931,12488,13170,13637,14091,14830,15422,15888,16448,16850,17372,18055,18620,19342,19667,20116,20801,21244,21783,22116,21550,21131,20580,20332,19729,19384,19026,18296,18016,17561,16980,16630,16157,15850,15121,14829,14454,14081,13515,12986,12816,12234,11668,11415,10914,10400,9856,9627,9156,8702,8278,7663,7430,6888,6406,5913,5589,5287,4653,4236,3843,3202,2822,2375,1972,1530,1101,668,219,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
// [50.00000,139.00000,92.80302,92.00000,90.00000]
// [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3510,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6718,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27870,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26256,0,0,0,0,9586565,0,0,0,0,0,0,0,2333,0,0,0,0]
// [32.0,251.0,242.40435,243.0,243.0]

